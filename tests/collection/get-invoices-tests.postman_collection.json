{
	"info": {
		"_postman_id": "get-invoices-collection-id",
		"name": "Get Invoices API Tests",
		"description": "Test API lấy danh sách hóa đơn với các trường hợp khác nhau",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login for Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Simple assertions for login request",
							"const accessTokenFromData = pm.iterationData.get(\"access_token\");",
							"const email = pm.iterationData.get(\"email\");",
							"",
							"// Only perform assertions if we actually made a login request",
							"if (!accessTokenFromData || accessTokenFromData === '') {",
							"    // Status code assertion",
							"    pm.test(`Login for ${email} - Status code check`, function () {",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 401, 422]);",
							"    });",
							"    ",
							"    // Response time assertion",
							"    pm.test(`Login for ${email} - Response time is acceptable`, function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(5000);",
							"    });",
							"    ",
							"    // Extract token if login successful",
							"    if (pm.response.code === 200) {",
							"        const responseData = pm.response.json();",
							"        if (responseData.access_token) {",
							"            pm.collectionVariables.set('login_access_token', responseData.access_token);",
							"            console.log('Access token stored from login:', responseData.access_token);",
							"        }",
							"    } else {",
							"        console.log('Login failed with status:', pm.response.code);",
							"        // Set empty token if login fails",
							"        pm.collectionVariables.set('login_access_token', '');",
							"    }",
							"} else {",
							"    console.log('Skipping login assertions - using predefined token from data');",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Only perform login if access_token field is empty in CSV data",
							"const accessTokenFromData = pm.iterationData.get(\"access_token\");",
							"",
							"if (!accessTokenFromData || accessTokenFromData === '') {",
							"    const email = pm.iterationData.get(\"email\");",
							"    const password = pm.iterationData.get(\"password\");",
							"    ",
							"    if (email && password) {",
							"        pm.request.body.raw = JSON.stringify({",
							"            email: email,",
							"            password: password",
							"        });",
							"        console.log('Performing login for:', email);",
							"    }",
							"} else {",
							"    console.log('Skipping login - using predefined token from data');",
							"    // Skip this request by setting it to a dummy endpoint",
							"    pm.request.url = pm.collectionVariables.get('base_url') + '/skip-login';",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/users/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Invoices Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get expected status from CSV data",
							"const expectedStatus = parseInt(pm.iterationData.get(\"expected_status\"));",
							"const description = pm.iterationData.get(\"description\");",
							"const accessTokenFromData = pm.iterationData.get(\"access_token\");",
							"const loginToken = pm.collectionVariables.get('login_access_token');",
							"",
							"pm.test(`${description} - Status code should be ${expectedStatus}`, function () {",
							"    pm.expect(pm.response.code).to.equal(expectedStatus);",
							"});",
							"",
							"// Response time assertion",
							"pm.test(`${description} - Response time is acceptable`, function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"// Log test case info",
							"console.log(`Test case: ${description}`);",
							"console.log(`Access token from data: ${accessTokenFromData || 'empty/missing'}`);",
							"console.log(`Login token: ${loginToken || 'empty/missing'}`);",
							"console.log(`Expected status: ${expectedStatus}, Actual status: ${pm.response.code}`);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Handle different token scenarios from CSV",
							"const accessTokenFromData = pm.iterationData.get(\"access_token\");",
							"const loginToken = pm.collectionVariables.get('login_access_token');",
							"",
							"let tokenToUse = '';",
							"",
							"// Use access_token from data if available, otherwise use login token",
							"if (accessTokenFromData && accessTokenFromData !== '') {",
							"    tokenToUse = accessTokenFromData;",
							"    console.log('Using token from CSV data:', accessTokenFromData);",
							"} else if (loginToken && loginToken !== '') {",
							"    tokenToUse = loginToken;",
							"    console.log('Using token from login response:', loginToken);",
							"} else {",
							"    console.log('No token available');",
							"}",
							"",
							"// Set authorization header based on token type",
							"if (tokenToUse && tokenToUse !== '' && tokenToUse !== 'null_token' && tokenToUse !== 'empty_token') {",
							"    if (tokenToUse === 'token_without_bearer') {",
							"        pm.request.headers.upsert({key: 'Authorization', value: 'valid_actual_token_here'});",
							"    } else {",
							"        pm.request.headers.upsert({key: 'Authorization', value: `Bearer ${tokenToUse}`});",
							"    }",
							"} else if (tokenToUse === 'empty_token') {",
							"    pm.request.headers.upsert({key: 'Authorization', value: 'Bearer '});",
							"} else if (tokenToUse === 'null_token') {",
							"    pm.request.headers.upsert({key: 'Authorization', value: 'Bearer null'});",
							"} else {",
							"    // Remove authorization header for missing token test",
							"    pm.request.headers.remove('Authorization');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/invoices",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"invoices"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8091"
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "login_access_token",
			"value": ""
		}
	]
}